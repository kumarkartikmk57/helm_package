1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Values.global.namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ .Values.app.name }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Values.global.namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Values.global.namespace }} svc -w {{ .Values.app.name }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Values.global.namespace }} {{ .Values.app.name }} --template "{{ "{{" }} range (index .status.loadBalancer.ingress 0) {{ "}}" }}{{ "{{" }}.{{ "}}" }}{{ "{{" }} end {{ "}}" }}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Values.global.namespace }} -l "app={{ .Values.app.labels.app }},version={{ .Values.app.labels.version }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Values.global.namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Values.global.namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Application Details:
   - Name: {{ .Values.app.name }}
   - Version: {{ .Values.app.version }}
   - Namespace: {{ .Values.global.namespace }}
   - Image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
   - Replicas: {{ .Values.deployment.replicaCount }}

3. Enabled Features:
{{- if .Values.configMap.enabled }}
   ✓ ConfigMap
{{- end }}
{{- if .Values.persistentVolumeClaim.enabled }}
   ✓ Persistent Storage
{{- end }}
{{- if .Values.istio.enabled }}
   ✓ Istio Service Mesh
{{- end }}
{{- if .Values.autoscaling.enabled }}
   ✓ Horizontal Pod Autoscaler
{{- end }}
{{- if .Values.ingress.enabled }}
   ✓ Ingress
{{- end }}

4. Useful Commands:
   - View pods: kubectl get pods -n {{ .Values.global.namespace }}
   - View services: kubectl get svc -n {{ .Values.global.namespace }}
   - View logs: kubectl logs -f deployment/{{ .Values.app.name }} -n {{ .Values.global.namespace }}
   - Scale deployment: kubectl scale deployment {{ .Values.app.name }} --replicas=3 -n {{ .Values.global.namespace }}

{{- if .Values.istio.enabled }}
5. Istio Commands:
   - View virtual services: kubectl get virtualservices -n {{ .Values.global.namespace }}
   - View destination rules: kubectl get destinationrules -n {{ .Values.global.namespace }}
{{- end }}

Thank you for using Universal App Helm Chart!